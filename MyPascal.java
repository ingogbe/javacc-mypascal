/* Generated By:JJTree&JavaCC: Do not edit this line. MyPascal.java */
class MyPascal/*@bgen(jjtree)*/implements MyPascalTreeConstants, MyPascalConstants {/*@bgen(jjtree)*/
  protected JJTMyPascalState jjtree = new JJTMyPascalState();public static void main(String[] args) throws ParseException {

                try{

                        MyPascal parser = new  MyPascal(System.in);

                        //Chamada para o primeiro método, início da análise
                        System.out.println("Tokens: ");
                        SimpleNode root = parser.start();
                        System.out.println("");

                        //Imprime a árvore
                        System.out.println("\u00c3\ufffdrvore: ");
                        root.dump("   ");

                        System.out.println("An\u00c3\u00a1lise com sucesso l\u00c3\u00a9xica e sint\u00c3\u00a1tica com sucesso");


                } catch (ParseException e){
                        System.out.println("Erro encontrado na an\u00c3\u00a1lise sint\u00c3\u00a1tica");
                        System.out.println(e.getMessage());
                } catch (TokenMgrError m){
                        System.out.println("Erro encontrado na an\u00c3\u00a1lise l\u00c3\u00a1xica");
                        System.out.println(m.getMessage());
                }
        }

/*
 * Funções para Analise sintatica
 */

// Programa completo composto de cabeçalho do programa, declarações de variaveis e funções, e função principal
  final public SimpleNode start() throws ParseException {
                             /*@bgen(jjtree) START */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      program_header();
      header();
      token_begin();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FOR:
        case IF:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        instruction();
      }
      token_end_period();
      jj_consume_token(0);
                                                                                           jjtree.closeNodeScope(jjtn000, true);
                                                                                           jjtc000 = false;
                                                                                          {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

// Cabeçalho do programa.
// Ex.: program Somador;
  final public void program_header() throws ParseException {
                                         /*@bgen(jjtree) PROGRAM_HEADER */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM_HEADER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      token_program();
      token_identifier();
      token_semicolon();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// Conjunto de variaveis (para auxiliar na declaração).
// Ex.: a | a,b | a,b,c
  final public void var_group() throws ParseException {
                               /*@bgen(jjtree) VAR_GROUP */
  SimpleNode jjtn000 = new SimpleNode(JJTVAR_GROUP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      token_identifier();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        token_comma();
        token_identifier();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// Declaração de uma variavel ou um grupo de variaveis e seu tipo.
// Ex.: a, b :integer;
  final public void var_group_type() throws ParseException {
                                  /*@bgen(jjtree) DEC_VAR */
  SimpleNode jjtn000 = new SimpleNode(JJTDEC_VAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      var_group();
      token_colon();
      token_type();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// Area de declaração de variavel, declaração de variaveis precedido pela palavra reservada "var"
// Ex.: var a, b: integer;
//          c: string;
//
//      var d: real;
  final public void var_declaration() throws ParseException {
                                       /*@bgen(jjtree) DECLARATION */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      token_var();
      label_3:
      while (true) {
        var_group_type();
        token_semicolon();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// Operação aritmetica
// Ex.: a + b | 1 + 2 | (a * b) | a - 4 | a + b + c | (1 + b / 2) | (1 + b) * 3 | a * (2 + 3 + b)
  final public void arithmetic_operation() throws ParseException {
                                                     /*@bgen(jjtree) ARITHMETIC_OPERATION */
  SimpleNode jjtn000 = new SimpleNode(JJTARITHMETIC_OPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        token_identifier();
        break;
      case NUMBER:
        token_number();
        break;
      case REAL_NUMBER:
        token_real_number();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARITHMETIC_OPERATOR:
        case NUMBER:
        case REAL_NUMBER:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARITHMETIC_OPERATOR:
          token_arithmetic_operator();
          token_identifier();
          break;
        case NUMBER:
          token_number();
          break;
        case REAL_NUMBER:
          token_real_number();
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// Operação relacional
// Ex.: (a > b) | (2 <= 3) | (b = 2) | (a + b >= 12) | (a = true)
  final public void relational_operation() throws ParseException {
                                                   /*@bgen(jjtree) RELATION_OPERATION */
  SimpleNode jjtn000 = new SimpleNode(JJTRELATION_OPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
      case REAL_NUMBER:
      case IDENTIFIER:
        arithmetic_operation();
        break;
      case BOOL:
        token_bool();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RELATIONAL_OPERATOR:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_5;
        }
        token_relational_operator();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
        case REAL_NUMBER:
        case IDENTIFIER:
          arithmetic_operation();
          break;
        case BOOL:
          token_bool();
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// Operação booleana
// Ex.: true and false | (a > x) or (x > c) | not a | not (a > x)
  final public void logic_operation() throws ParseException {
                                           /*@bgen(jjtree) LOGIC_OPERATION */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGIC_OPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOGIC_OPERATOR_NOT:
        token_logic_operator_not();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      relational_operation();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LOGIC_OPERATOR:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_6;
        }
        token_logic_operator();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LOGIC_OPERATOR_NOT:
          token_logic_operator_not();
          break;
        default:
          jj_la1[11] = jj_gen;
          ;
        }
        relational_operation();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// Atribuição
// a := b | a := 3 | a := true | a := 'mensagem' | a := b + c | a := b < c | a := not b | a := a or b | a := soma(b, c)
  final public void assignment_instruction() throws ParseException {
                                             /*@bgen(jjtree) ASSIGNMENT */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      token_assignment();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOGIC_OPERATOR_NOT:
      case BOOL:
      case NUMBER:
      case REAL_NUMBER:
      case IDENTIFIER:
        logic_operation();
        break;
      case STRING:
        token_string();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      token_semicolon();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// Laço de repetição - for
// Ex.: for i:=0 to (a+c) do begin <uma ou mais instruções> end;
  final public void loop_for_instruction() throws ParseException {
                                         /*@bgen(jjtree) LOOP_FOR */
  SimpleNode jjtn000 = new SimpleNode(JJTLOOP_FOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      token_for();
      token_identifier();
      token_assignment();
      arithmetic_operation();
      token_to();
      arithmetic_operation();
      token_do();
      token_begin();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FOR:
        case IF:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_7;
        }
        instruction();
      }
      token_end_semicolon();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// If - then - else - Instrução condicional
// Ex.: if((a > b) and c) then begin <uma ou mais instruções> end;
//      if((a > b) and c) then begin <uma ou mais instruções> end else <uma ou mais instruções> end;
  final public void if_then_else_instruction() throws ParseException {
                                                 /*@bgen(jjtree) IF_THEN_ELSE */
  SimpleNode jjtn000 = new SimpleNode(JJTIF_THEN_ELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      token_if();
      token_l_bracket();
      logic_operation();
      token_r_bracket();
      token_then();
      token_begin();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FOR:
        case IF:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_8;
        }
        instruction();
      }
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case END:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_9;
        }
        token_end();
        token_else();
        token_begin();
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FOR:
          case IF:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[16] = jj_gen;
            break label_10;
          }
          instruction();
        }
      }
      token_end_semicolon();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// Chamada de função
// Ex.: nome_da_funcao(a, b, c); | nome_da_funcao();
  final public void function_call() throws ParseException {
                                       /*@bgen(jjtree) FUNCTION_CALL */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION_CALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      token_l_bracket();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOL:
        case NUMBER:
        case REAL_NUMBER:
        case STRING:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_11;
        }
        function_params();
      }
      token_r_bracket();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//Chamada de 
  final public void function_params() throws ParseException {
                                                /*@bgen(jjtree) FUNCTION_CALL_PARAMS */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION_CALL_PARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        token_identifier();
        break;
      case NUMBER:
        token_number();
        break;
      case REAL_NUMBER:
        token_real_number();
        break;
      case STRING:
        token_string();
        break;
      case BOOL:
        token_bool();
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_12;
        }
        token_comma();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          token_identifier();
          break;
        case NUMBER:
          token_number();
          break;
        case REAL_NUMBER:
          token_real_number();
          break;
        case STRING:
          token_string();
          break;
        case BOOL:
          token_bool();
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// Cabeçalho de uma função
// Ex.: function somar(a, b: integer):integer;
//      function concat_int_str(a: integer; s: string): string;
//      function hello():string;
  final public void function_header() throws ParseException {
                                           /*@bgen(jjtree) FUNCTION_HEADER */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION_HEADER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      token_function();
      token_identifier();
      token_l_bracket();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        var_group_type();
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SEMICOLON:
            ;
            break;
          default:
            jj_la1[21] = jj_gen;
            break label_13;
          }
          token_semicolon();
          var_group_type();
        }
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      token_r_bracket();
      token_colon();
      token_type();
      token_semicolon();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// Função completa com corpo
  final public void function_block() throws ParseException {
                                   /*@bgen(jjtree) FUNCTION */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      function_header();
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_14;
        }
        var_declaration();
      }
      token_begin();
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FOR:
        case IF:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_15;
        }
        instruction();
      }
      token_end_semicolon();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// Instrução. Uma instução pode ser um if/then/else, laço de repetição tipo for, atribuição ou chamada de função
  final public void instruction() throws ParseException {
                                   /*@bgen(jjtree) INSTRUCTION */
  SimpleNode jjtn000 = new SimpleNode(JJTINSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOR:
        loop_for_instruction();
        break;
      case IF:
        if_then_else_instruction();
        break;
      case IDENTIFIER:
        token_identifier();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGNMENT:
          assignment_instruction();
          break;
        case L_BRACKET:
          function_call();
          token_semicolon();
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// Cabeçalho depois do cabeçalho do programa e antes do programa principal
// São declaradas as variaveis globais e funções
  final public void header() throws ParseException {
                         /*@bgen(jjtree) HEADER */
  SimpleNode jjtn000 = new SimpleNode(JJTHEADER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
        case FUNCTION:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_16;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FUNCTION:
          function_block();
          break;
        case VAR:
          var_declaration();
          break;
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/*
 * Funções de chamadas de tokens, e também de atribuição do conteudo dos tokens na arvore gerada
 */
  final public void token_program() throws ParseException {
                                       /*@bgen(jjtree) TOKEN_PROGRAM */
                                       SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_PROGRAM);
                                       boolean jjtc000 = true;
                                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(PROGRAM);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                     jjtn000.value = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void token_identifier() throws ParseException {
                                             /*@bgen(jjtree) TOKEN_IDENTIFIER */
                                             SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_IDENTIFIER);
                                             boolean jjtc000 = true;
                                             jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        jjtn000.value = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void token_semicolon() throws ParseException {
                                           /*@bgen(jjtree) TOKEN_SEMICOLON */
                                           SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_SEMICOLON);
                                           boolean jjtc000 = true;
                                           jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SEMICOLON);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.value = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void token_begin() throws ParseException {
                                   /*@bgen(jjtree) TOKEN_BEGIN */
                                   SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_BEGIN);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(BEGIN);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                   jjtn000.value = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void token_end_period() throws ParseException {
                                             /*@bgen(jjtree) TOKEN_END_PERIOD */
                                             SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_END_PERIOD);
                                             boolean jjtc000 = true;
                                             jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(END_PERIOD);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        jjtn000.value = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void token_comma() throws ParseException {
                                   /*@bgen(jjtree) TOKEN_COMMA */
                                   SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_COMMA);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(COMMA);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                   jjtn000.value = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void token_colon() throws ParseException {
                                   /*@bgen(jjtree) TOKEN_COLON */
                                   SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_COLON);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(COLON);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                   jjtn000.value = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void token_type() throws ParseException {
                                 /*@bgen(jjtree) TOKEN_TYPE */
                                 SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_TYPE);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(TYPE);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                  jjtn000.value = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void token_var() throws ParseException {
                               /*@bgen(jjtree) TOKEN_VAR */
                               SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_VAR);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(VAR);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 jjtn000.value = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void token_l_bracket() throws ParseException {
                                           /*@bgen(jjtree) TOKEN_L_BRACKET */
                                           SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_L_BRACKET);
                                           boolean jjtc000 = true;
                                           jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(L_BRACKET);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.value = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void token_r_bracket() throws ParseException {
                                           /*@bgen(jjtree) TOKEN_R_BRACKET */
                                           SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_R_BRACKET);
                                           boolean jjtc000 = true;
                                           jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(R_BRACKET);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.value = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void token_number() throws ParseException {
                                     /*@bgen(jjtree) TOKEN_NUMBER */
                                     SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_NUMBER);
                                     boolean jjtc000 = true;
                                     jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NUMBER);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                    jjtn000.value = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void token_real_number() throws ParseException {
                                               /*@bgen(jjtree) TOKEN_REAL_NUMBER */
                                               SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_REAL_NUMBER);
                                               boolean jjtc000 = true;
                                               jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(REAL_NUMBER);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.value = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void token_arithmetic_operator() throws ParseException {
                                                               /*@bgen(jjtree) TOKEN_ARITHMETIC_OPERATOR */
                                                               SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_ARITHMETIC_OPERATOR);
                                                               boolean jjtc000 = true;
                                                               jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ARITHMETIC_OPERATOR);
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                 jjtn000.value = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void token_bool() throws ParseException {
                                 /*@bgen(jjtree) TOKEN_BOOL */
                                 SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_BOOL);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(BOOL);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                  jjtn000.value = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void token_relational_operator() throws ParseException {
                                                               /*@bgen(jjtree) TOKEN_RELATIONAL_OPERATOR */
                                                               SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_RELATIONAL_OPERATOR);
                                                               boolean jjtc000 = true;
                                                               jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(RELATIONAL_OPERATOR);
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                 jjtn000.value = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void token_logic_operator_not() throws ParseException {
                                                             /*@bgen(jjtree) TOKEN_LOGIC_OPERATOR_NOT */
                                                             SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_LOGIC_OPERATOR_NOT);
                                                             boolean jjtc000 = true;
                                                             jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(LOGIC_OPERATOR_NOT);
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                                jjtn000.value = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void token_logic_operator() throws ParseException {
                                                     /*@bgen(jjtree) TOKEN_LOGIC_OPERATOR */
                                                     SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_LOGIC_OPERATOR);
                                                     boolean jjtc000 = true;
                                                     jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(LOGIC_OPERATOR);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                            jjtn000.value = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void token_string() throws ParseException {
                                     /*@bgen(jjtree) TOKEN_STRING */
                                     SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_STRING);
                                     boolean jjtc000 = true;
                                     jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(STRING);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                    jjtn000.value = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void token_assignment() throws ParseException {
                                             /*@bgen(jjtree) TOKEN_ASSIGNMENT */
                                             SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_ASSIGNMENT);
                                             boolean jjtc000 = true;
                                             jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ASSIGNMENT);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        jjtn000.value = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void token_for() throws ParseException {
                               /*@bgen(jjtree) TOKEN_FOR */
                               SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_FOR);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(FOR);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 jjtn000.value = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void token_to() throws ParseException {
                             /*@bgen(jjtree) TOKEN_TO */
                             SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_TO);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(TO);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                jjtn000.value = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void token_do() throws ParseException {
                             /*@bgen(jjtree) TOKEN_DO */
                             SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_DO);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(DO);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                jjtn000.value = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void token_end_semicolon() throws ParseException {
                                                   /*@bgen(jjtree) TOKEN_END_SEMICOLON */
                                                   SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_END_SEMICOLON);
                                                   boolean jjtc000 = true;
                                                   jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(END_SEMICOLON);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                           jjtn000.value = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void token_else() throws ParseException {
                                 /*@bgen(jjtree) TOKEN_ELSE */
                                 SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_ELSE);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ELSE);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                  jjtn000.value = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void token_if() throws ParseException {
                             /*@bgen(jjtree) TOKEN_IF */
                             SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_IF);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IF);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                jjtn000.value = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void token_then() throws ParseException {
                                 /*@bgen(jjtree) TOKEN_THEN */
                                 SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_THEN);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(THEN);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                  jjtn000.value = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void token_end() throws ParseException {
                               /*@bgen(jjtree) TOKEN_END */
                               SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_END);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(END);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 jjtn000.value = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void token_function() throws ParseException {
                                         /*@bgen(jjtree) TOKEN_FUNCTION */
                                         SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_FUNCTION);
                                         boolean jjtc000 = true;
                                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(FUNCTION);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                      jjtn000.value = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  /** Generated Token Manager. */
  public MyPascalTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[29];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2400000,0x10000,0x0,0x0,0x40,0x40,0x0,0x1000,0x0,0x80,0x100,0x80,0x80,0x2400000,0x2400000,0x100000,0x2400000,0x0,0x0,0x10000,0x0,0x8000,0x0,0x10000000,0x2400000,0x2000,0x2400000,0x50000000,0x50000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x2000,0x0,0x2000,0x2600,0x600,0x600,0x2700,0x0,0x2700,0x0,0x0,0x0,0x2f00,0x2000,0x2000,0x0,0x2000,0x2f00,0x2f00,0x0,0x2f00,0x0,0x2000,0x0,0x2000,0x1000,0x2000,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public MyPascal(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyPascal(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyPascalTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MyPascal(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new MyPascalTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MyPascal(MyPascalTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MyPascalTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 29; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
