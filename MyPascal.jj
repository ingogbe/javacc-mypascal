/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. MyPascal.jj */
/*@egen*/
options {
	JAVA_UNICODE_ESCAPE = true;
	IGNORE_CASE = true;
 	STATIC = false;
}

PARSER_BEGIN(MyPascal)
class MyPascal/*@bgen(jjtree)*/implements MyPascalTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTMyPascalState jjtree = new JJTMyPascalState();

/*@egen*/
	public static void main(String[] args) throws ParseException {

		try{
			
			MyPascal parser = new  MyPascal(System.in);

			//Chamada para o primeiro m\u00c3\u00a9todo, in\u00c3\u00adcio da an\u00c3\u00a1lise
			System.out.println("Tokens: ");
			SimpleNode root = parser.start();
			System.out.println("");

			//Imprime a \u00c3\u00a1rvore
			System.out.println("\u00c3\ufffdrvore: ");
  	  		root.dump("   ");

  	  		System.out.println("An\u00c3\u00a1lise com sucesso l\u00c3\u00a9xica e sint\u00c3\u00a1tica com sucesso");
  	  		

		} catch (ParseException e){
			System.out.println("Erro encontrado na an\u00c3\u00a1lise sint\u00c3\u00a1tica");
			System.out.println(e.getMessage());
		} catch (TokenMgrError m){
			System.out.println("Erro encontrado na an\u00c3\u00a1lise l\u00c3\u00a1xica");
			System.out.println(m.getMessage());
		}
	}
}
PARSER_END(MyPascal)


/*
 * Ignora espa\u00c3\u00a7os, tabula\u00c3\u00a7\u00c3\u00b5es e quebras de linha
 */

SKIP: {
	" " | "\t" | "\n" | "\r" | "\f"
}


/*
 * DEFINICAO DOS TOKENS *
 */

// Operadores aritm\u00c3\u00a9ticos
TOKEN: {
	<ARITHMETIC_OPERATOR: "+" | "-" | "*" | "/" > {
		System.out.println("ARITHMETIC_OPERATOR -> " + image);
	}
}

// Operadores l\u00c3\u00b3gicos
TOKEN: {
	<LOGIC_OPERATOR_NOT: "not" >{
		System.out.println("LOGIC_OPERATOR_NOT -> " + image);
	} |

	<LOGIC_OPERATOR: "and" | "or" > {
		System.out.println("LOGIC_OPERATOR -> " + image);
	}
}

// Operadores relacionais
TOKEN: {
	// #TOKENS are 'private' tokens, just for internal usage
	<#EQUAL: "=" > |
	<#GREATER: ">" > | 
	<#LESSER: "<" > |

	<RELATIONAL_OPERATOR: "<=" | <LESSER> | <GREATER> | ">=" | <EQUAL> | "<>" > {
		System.out.println("RELATIONAL_OPERATOR -> " + image);
	}
}

// Separadores
TOKEN: {
	<L_BRACKET: "(" > {
		System.out.println("L_BRACKET -> " + image);
	} | 

	<R_BRACKET: ")" > {
		System.out.println("R_BRACKET -> " + image);
	}
}

// Pontua\u00c3\u00a7\u00c3\u00b5es
TOKEN: {
	<SEMICOLON: ";" > {
		System.out.println("SEMICOLON -> " + image);
	} | 

	<COMMA: "," > {
		System.out.println("COMMA -> " + image);
	} | 

	<PERIOD: "." > {
		System.out.println("PERIOD -> " + image);
	} |

	<COLON: ":" > {
		System.out.println("COLON -> " + image);
	}
}

// Palavras reservadas
TOKEN: {
	<BEGIN: "begin" > {
		System.out.println("BEGIN -> " + image);
	} | 

	<END: "end" > {
		System.out.println("END -> " + image);
	} | 

	<WHILE: "while" > {
		System.out.println("WHILE -> " + image);
	} | 

	<FOR: "for" > {
		System.out.println("FOR -> " + image);
	} | 

	<TO: "to" > {
		System.out.println("TO -> " + image);
	} | 

	<DO: "do" > {
		System.out.println("DO -> " + image);
	} | 

	<IF: "if" > {
		System.out.println("IF -> " + image);
	} | 

	<ELSE: "else" > {
		System.out.println("ELSE -> " + image);
	} | 

	<THEN: "then" > {
		System.out.println("THEN -> " + image);
	} | 

	<VAR: "var" > {
		System.out.println("VAR -> " + image);
	} |

	<PROGRAM: "program" > {
		System.out.println("PROGRAM -> " + image);
	} | 

	<FUNCTION: "function" > {
		System.out.println("FUNCTION -> " + image);
	}
}

// Fim programa, functions, condi\u00c3\u00a7\u00c3\u00b5es, etc
TOKEN:{
	<END_PERIOD: (<END><PERIOD>) > {
		System.out.println("END_PERIOD -> " + image);
	} | 

	<END_SEMICOLON: (<END><SEMICOLON>) > {
		System.out.println("END_SEMICOLON -> " + image);
	}
}

// Palavras reservadas - Tipos de dados
TOKEN: {
	<TYPE: "integer" | "real" | "char" | "bool" | "string" > {
		System.out.println("TYPE -> " + image);
	}
}

// Tipos de dados - valores
TOKEN: {
	// #TOKENS are 'private' tokens, just for internal usage
	<#DIGIT: (["0"-"9"]) > |
	<#LETTER: (["a"-"z","A"-"Z"]) > |
	<#UNDERLINE: "_" > |
	<#APOSTROPHE: "'" > |
	<#OTHER_CHAR: ["$","%","#","@","!","?","&","[","]","{","}"," "] > |
	<#SPECIAL_CHAR: <UNDERLINE>|<COMMA>|<SEMICOLON>|<PERIOD>|<COLON>|<EQUAL>|<GREATER>|<LESSER>|<ARITHMETIC_OPERATOR>|<OTHER_CHAR>|<L_BRACKET>|<R_BRACKET> > |

	<BOOL: "true" | "false" > {
		System.out.println("BOOL -> " + image);
	} | 

	<NUMBER: (<DIGIT>)+ > {
		System.out.println("NUMBER -> " + image);
	} |

	<REAL_NUMBER: (<DIGIT>)+<PERIOD>(<DIGIT>)+ > {
		System.out.println("REAL_NUMBER -> " + image);
	} |

	<STRING: <APOSTROPHE> (<LETTER> | <DIGIT> | <SPECIAL_CHAR>)* <APOSTROPHE> > {
		System.out.println("STRING -> " + image);
	}
}

// Atribui\u00c3\u00a7\u00c3\u00a3o
TOKEN: {
	<ASSIGNMENT: (<COLON><EQUAL>) > {
		System.out.println("ASSIGNMENT -> " + image);
	}
}

// Identificador
TOKEN: {
	<IDENTIFIER: (<UNDERLINE>)*(<LETTER>)+(<DIGIT>|<UNDERLINE>|<LETTER>)* > {
		System.out.println("IDENTIFIER -> " + image);
	}
}


/*
 * Fun\u00c3\u00a7\u00c3\u00b5es para Analise sintatica
 */

// Programa completo composto de cabe\u00c3\u00a7alho do programa, declara\u00c3\u00a7\u00c3\u00b5es de variaveis e fun\u00c3\u00a7\u00c3\u00b5es, e fun\u00c3\u00a7\u00c3\u00a3o principal
SimpleNode start()        : {/*@bgen(jjtree) START */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) START */
        try {
/*@egen*/
	program_header() header() token_begin() (instruction())* token_end_period()<EOF>/*@bgen(jjtree)*/
                                                                                         {
                                                                                           jjtree.closeNodeScope(jjtn000, true);
                                                                                           jjtc000 = false;
                                                                                         }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}

// Cabe\u00c3\u00a7alho do programa.
// Ex.: program Somador;
void program_header()                 : {/*@bgen(jjtree) PROGRAM_HEADER */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM_HEADER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) PROGRAM_HEADER */
        try {
/*@egen*/
	token_program()token_identifier()token_semicolon()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

// Conjunto de variaveis (para auxiliar na declara\u00c3\u00a7\u00c3\u00a3o).
// Ex.: a | a,b | a,b,c
void var_group()            : {/*@bgen(jjtree) VAR_GROUP */
  SimpleNode jjtn000 = new SimpleNode(JJTVAR_GROUP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) VAR_GROUP */
        try {
/*@egen*/
	token_identifier()(token_comma()token_identifier())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


// Declara\u00c3\u00a7\u00c3\u00a3o de uma variavel ou um grupo de variaveis e seu tipo.
// Ex.: a, b :integer;
void var_group_type()          : {/*@bgen(jjtree) DEC_VAR */
  SimpleNode jjtn000 = new SimpleNode(JJTDEC_VAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) DEC_VAR */
        try {
/*@egen*/
	var_group()token_colon()token_type()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

// Area de declara\u00c3\u00a7\u00c3\u00a3o de variavel, declara\u00c3\u00a7\u00c3\u00a3o de variaveis precedido pela palavra reservada "var"
// Ex.: var a, b: integer;
//          c: string;
//
//      var d: real;
void var_declaration()              : {/*@bgen(jjtree) DECLARATION */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) DECLARATION */
        try {
/*@egen*/
	(token_var()(var_group_type()token_semicolon())+)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

// Opera\u00c3\u00a7\u00c3\u00a3o aritmetica
// Ex.: a + b | 1 + 2 | (a * b) | a - 4 | a + b + c | (1 + b / 2) | (1 + b) * 3 | a * (2 + 3 + b)
void arithmetic_operation()                       : {/*@bgen(jjtree) ARITHMETIC_OPERATION */
  SimpleNode jjtn000 = new SimpleNode(JJTARITHMETIC_OPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ARITHMETIC_OPERATION */
        try {
/*@egen*/
	(token_identifier() | token_number() | token_real_number())
	(token_arithmetic_operator() token_identifier() | token_number() | token_real_number() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

// Opera\u00c3\u00a7\u00c3\u00a3o relacional
// Ex.: (a > b) | (2 <= 3) | (b = 2) | (a + b >= 12) | (a = true)
void relational_operation()                     : {/*@bgen(jjtree) RELATION_OPERATION */
  SimpleNode jjtn000 = new SimpleNode(JJTRELATION_OPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) RELATION_OPERATION */
        try {
/*@egen*/
	(arithmetic_operation() | token_bool()) (token_relational_operator() (arithmetic_operation() | token_bool()))*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

// Opera\u00c3\u00a7\u00c3\u00a3o booleana
// Ex.: true and false | (a > x) or (x > c) | not a | not (a > x)
void logic_operation()                  : {/*@bgen(jjtree) LOGIC_OPERATION */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGIC_OPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) LOGIC_OPERATION */
        try {
/*@egen*/
	(token_logic_operator_not())? relational_operation() (token_logic_operator() (token_logic_operator_not())? relational_operation() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

// Atribui\u00c3\u00a7\u00c3\u00a3o
// a := b | a := 3 | a := true | a := 'mensagem' | a := b + c | a := b < c | a := not b | a := a or b | a := soma(b, c)
void assignment_instruction()             : {/*@bgen(jjtree) ASSIGNMENT */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ASSIGNMENT */
        try {
/*@egen*/
	token_assignment() (logic_operation() | token_string()) token_semicolon()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

// La\u00c3\u00a7o de repeti\u00c3\u00a7\u00c3\u00a3o - for
// Ex.: for i:=0 to (a+c) do begin <uma ou mais instru\u00c3\u00a7\u00c3\u00b5es> end;
void loop_for_instruction()           : {/*@bgen(jjtree) LOOP_FOR */
  SimpleNode jjtn000 = new SimpleNode(JJTLOOP_FOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) LOOP_FOR */
        try {
/*@egen*/
	token_for()token_identifier()token_assignment()arithmetic_operation()token_to()arithmetic_operation()token_do()token_begin()(instruction())*token_end_semicolon()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

// If - then - else - Instru\u00c3\u00a7\u00c3\u00a3o condicional
// Ex.: if((a > b) and c) then begin <uma ou mais instru\u00c3\u00a7\u00c3\u00b5es> end;
//      if((a > b) and c) then begin <uma ou mais instru\u00c3\u00a7\u00c3\u00b5es> end else <uma ou mais instru\u00c3\u00a7\u00c3\u00b5es> end;
void if_then_else_instruction()               : {/*@bgen(jjtree) IF_THEN_ELSE */
  SimpleNode jjtn000 = new SimpleNode(JJTIF_THEN_ELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) IF_THEN_ELSE */
        try {
/*@egen*/
	token_if()token_l_bracket()logic_operation()token_r_bracket()token_then()token_begin()
	(
		(instruction())*
		(token_end() token_else() token_begin() (instruction())* )*
	)
	token_end_semicolon()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

// Chamada de fun\u00c3\u00a7\u00c3\u00a3o
// Ex.: nome_da_funcao(a, b, c); | nome_da_funcao();
void function_call()                : {/*@bgen(jjtree) FUNCTION_CALL */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION_CALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) FUNCTION_CALL */
        try {
/*@egen*/
	token_l_bracket() (function_params())* token_r_bracket()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

//Chamada de 
void function_params()                       : {/*@bgen(jjtree) FUNCTION_CALL_PARAMS */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION_CALL_PARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) FUNCTION_CALL_PARAMS */
        try {
/*@egen*/
	(token_identifier() | token_number() | token_real_number() | token_string() | token_bool())
	(token_comma() (token_identifier() | token_number() | token_real_number() | token_string() | token_bool()) )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

// Cabe\u00c3\u00a7alho de uma fun\u00c3\u00a7\u00c3\u00a3o
// Ex.: function somar(a, b: integer):integer;
//      function concat_int_str(a: integer; s: string): string;
//      function hello():string;
void function_header()                  : {/*@bgen(jjtree) FUNCTION_HEADER */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION_HEADER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) FUNCTION_HEADER */
        try {
/*@egen*/
	token_function()token_identifier()token_l_bracket() (var_group_type()((token_semicolon())var_group_type())*)? token_r_bracket()token_colon()token_type()token_semicolon()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

// Fun\u00c3\u00a7\u00c3\u00a3o completa com corpo
void function_block()           : {/*@bgen(jjtree) FUNCTION */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) FUNCTION */
        try {
/*@egen*/
	function_header() (var_declaration())* token_begin()
		(instruction())*
	token_end_semicolon()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

// Instru\u00c3\u00a7\u00c3\u00a3o. Uma instu\u00c3\u00a7\u00c3\u00a3o pode ser um if/then/else, la\u00c3\u00a7o de repeti\u00c3\u00a7\u00c3\u00a3o tipo for, atribui\u00c3\u00a7\u00c3\u00a3o ou chamada de fun\u00c3\u00a7\u00c3\u00a3o
void instruction()              : {/*@bgen(jjtree) INSTRUCTION */
  SimpleNode jjtn000 = new SimpleNode(JJTINSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) INSTRUCTION */
        try {
/*@egen*/
	loop_for_instruction() | if_then_else_instruction() | (token_identifier() (assignment_instruction() | function_call() token_semicolon()) )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

// Cabe\u00c3\u00a7alho depois do cabe\u00c3\u00a7alho do programa e antes do programa principal
// S\u00c3\u00a3o declaradas as variaveis globais e fun\u00c3\u00a7\u00c3\u00b5es
void header()         : {/*@bgen(jjtree) HEADER */
  SimpleNode jjtn000 = new SimpleNode(JJTHEADER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) HEADER */
        try {
/*@egen*/
	(function_block() | var_declaration())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}




/*
 * Fun\u00c3\u00a7\u00c3\u00b5es de chamadas de tokens, e tamb\u00c3\u00a9m de atribui\u00c3\u00a7\u00c3\u00a3o do conteudo dos tokens na arvore gerada
 */

void token_program()                : {/*@bgen(jjtree) TOKEN_PROGRAM */
                                       SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_PROGRAM);
                                       boolean jjtc000 = true;
                                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) TOKEN_PROGRAM */
        try {
/*@egen*/
	t=<PROGRAM>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void token_identifier()                   : {/*@bgen(jjtree) TOKEN_IDENTIFIER */
                                             SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_IDENTIFIER);
                                             boolean jjtc000 = true;
                                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) TOKEN_IDENTIFIER */
        try {
/*@egen*/
	t=<IDENTIFIER>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void token_semicolon()                  : {/*@bgen(jjtree) TOKEN_SEMICOLON */
                                           SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_SEMICOLON);
                                           boolean jjtc000 = true;
                                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) TOKEN_SEMICOLON */
        try {
/*@egen*/
	t=<SEMICOLON>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void token_begin()              : {/*@bgen(jjtree) TOKEN_BEGIN */
                                   SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_BEGIN);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) TOKEN_BEGIN */
        try {
/*@egen*/
	t=<BEGIN>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void token_end_period()                   : {/*@bgen(jjtree) TOKEN_END_PERIOD */
                                             SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_END_PERIOD);
                                             boolean jjtc000 = true;
                                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) TOKEN_END_PERIOD */
        try {
/*@egen*/
	t=<END_PERIOD>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void token_comma()              : {/*@bgen(jjtree) TOKEN_COMMA */
                                   SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_COMMA);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) TOKEN_COMMA */
        try {
/*@egen*/
	t=<COMMA>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void token_colon()              : {/*@bgen(jjtree) TOKEN_COLON */
                                   SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_COLON);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) TOKEN_COLON */
        try {
/*@egen*/
	t=<COLON>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void token_type()             : {/*@bgen(jjtree) TOKEN_TYPE */
                                 SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_TYPE);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) TOKEN_TYPE */
        try {
/*@egen*/
	t=<TYPE>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void token_var()            : {/*@bgen(jjtree) TOKEN_VAR */
                               SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_VAR);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) TOKEN_VAR */
        try {
/*@egen*/
	t=<VAR>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void token_l_bracket()                  : {/*@bgen(jjtree) TOKEN_L_BRACKET */
                                           SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_L_BRACKET);
                                           boolean jjtc000 = true;
                                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) TOKEN_L_BRACKET */
        try {
/*@egen*/
	t=<L_BRACKET>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void token_r_bracket()                  : {/*@bgen(jjtree) TOKEN_R_BRACKET */
                                           SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_R_BRACKET);
                                           boolean jjtc000 = true;
                                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) TOKEN_R_BRACKET */
        try {
/*@egen*/
	t=<R_BRACKET>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void token_number()               : {/*@bgen(jjtree) TOKEN_NUMBER */
                                     SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_NUMBER);
                                     boolean jjtc000 = true;
                                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) TOKEN_NUMBER */
        try {
/*@egen*/
	t=<NUMBER>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void token_real_number()                    : {/*@bgen(jjtree) TOKEN_REAL_NUMBER */
                                               SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_REAL_NUMBER);
                                               boolean jjtc000 = true;
                                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) TOKEN_REAL_NUMBER */
        try {
/*@egen*/
	t=<REAL_NUMBER>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void token_arithmetic_operator()                            : {/*@bgen(jjtree) TOKEN_ARITHMETIC_OPERATOR */
                                                               SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_ARITHMETIC_OPERATOR);
                                                               boolean jjtc000 = true;
                                                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) TOKEN_ARITHMETIC_OPERATOR */
        try {
/*@egen*/
	t=<ARITHMETIC_OPERATOR>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void token_bool()             : {/*@bgen(jjtree) TOKEN_BOOL */
                                 SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_BOOL);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) TOKEN_BOOL */
        try {
/*@egen*/
	t=<BOOL>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void token_relational_operator()                            : {/*@bgen(jjtree) TOKEN_RELATIONAL_OPERATOR */
                                                               SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_RELATIONAL_OPERATOR);
                                                               boolean jjtc000 = true;
                                                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) TOKEN_RELATIONAL_OPERATOR */
        try {
/*@egen*/
	t=<RELATIONAL_OPERATOR>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void token_logic_operator_not()                           : {/*@bgen(jjtree) TOKEN_LOGIC_OPERATOR_NOT */
                                                             SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_LOGIC_OPERATOR_NOT);
                                                             boolean jjtc000 = true;
                                                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) TOKEN_LOGIC_OPERATOR_NOT */
        try {
/*@egen*/
	t=<LOGIC_OPERATOR_NOT>/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                               }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void token_logic_operator()                       : {/*@bgen(jjtree) TOKEN_LOGIC_OPERATOR */
                                                     SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_LOGIC_OPERATOR);
                                                     boolean jjtc000 = true;
                                                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) TOKEN_LOGIC_OPERATOR */
        try {
/*@egen*/
	t=<LOGIC_OPERATOR>/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void token_string()               : {/*@bgen(jjtree) TOKEN_STRING */
                                     SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_STRING);
                                     boolean jjtc000 = true;
                                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) TOKEN_STRING */
        try {
/*@egen*/
	t=<STRING>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void token_assignment()                   : {/*@bgen(jjtree) TOKEN_ASSIGNMENT */
                                             SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_ASSIGNMENT);
                                             boolean jjtc000 = true;
                                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) TOKEN_ASSIGNMENT */
        try {
/*@egen*/
	t=<ASSIGNMENT>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void token_for()            : {/*@bgen(jjtree) TOKEN_FOR */
                               SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_FOR);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) TOKEN_FOR */
        try {
/*@egen*/
	t=<FOR>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void token_to()           : {/*@bgen(jjtree) TOKEN_TO */
                             SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_TO);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) TOKEN_TO */
        try {
/*@egen*/
	t=<TO>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void token_do()           : {/*@bgen(jjtree) TOKEN_DO */
                             SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_DO);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) TOKEN_DO */
        try {
/*@egen*/
	t=<DO>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void token_end_semicolon()                      : {/*@bgen(jjtree) TOKEN_END_SEMICOLON */
                                                   SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_END_SEMICOLON);
                                                   boolean jjtc000 = true;
                                                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) TOKEN_END_SEMICOLON */
        try {
/*@egen*/
	t=<END_SEMICOLON>/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void token_else()             : {/*@bgen(jjtree) TOKEN_ELSE */
                                 SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_ELSE);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) TOKEN_ELSE */
        try {
/*@egen*/
	t=<ELSE>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void token_if()           : {/*@bgen(jjtree) TOKEN_IF */
                             SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_IF);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) TOKEN_IF */
        try {
/*@egen*/
	t=<IF>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void token_then()             : {/*@bgen(jjtree) TOKEN_THEN */
                                 SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_THEN);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) TOKEN_THEN */
        try {
/*@egen*/
	t=<THEN>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void token_end()            : {/*@bgen(jjtree) TOKEN_END */
                               SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_END);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) TOKEN_END */
        try {
/*@egen*/
	t=<END>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void token_function()                 : {/*@bgen(jjtree) TOKEN_FUNCTION */
                                         SimpleNode jjtn000 = new SimpleNode(JJTTOKEN_FUNCTION);
                                         boolean jjtc000 = true;
                                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) TOKEN_FUNCTION */
        try {
/*@egen*/
	t=<FUNCTION>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}